#tag ModuleProtected Module rbrwDBUtils	#tag Method, Flags = &h0		Function AsDictionary(extends rs as RecordSet) As Dictionary		  // up to the caller to ensure recordset has at least 2 fields		  dim ret as new Dictionary		  if rs.EOF and rs.BOF then return ret  // special exit for empty set		  		  rs.MoveFirst		  while not rs.EOF		    ret.Value( rs.IdxField(1).StringValue ) = rs.IdxField(2).StringValue		    rs.MoveNext		  wend		  return ret		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AsStringArray(extends rs as RecordSet) As string()		  dim ret() as string		  dim lastFieldIx as integer = rs.FieldCount 		  // tempting to rs.MoveFirst but that actually clears the EOF condition on empty sets		  while not rs.EOF		    for i as integer = 1 to lastFieldIx  // snarl, fields are 1-indexed		      ret.Append rs.IdxField(i)		    next i		    rs.MoveNext		  wend		  return ret		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AsTextBlock(extends rs as RecordSet) As string		  return rs.AsTextBlock(EndOfLine)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AsTextBlock(extends rs as RecordSet, sep as string) As string		  dim ret() as string = rs.asStringArray		  return Join(ret, sep)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Contains(extends rs as RecordSet, matches as string) As Boolean		  dim lastFieldIx as integer = rs.FieldCount 		  rs.MoveFirst		  while not rs.EOF		    for i as integer = 1 to lastFieldIx  // snarl, fields are 1-indexed		      if rs.IdxField(i).StringValue = matches then		        return true		      end if		    next i		    rs.MoveNext		  wend		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ContainsCaseSensitive(extends rs as RecordSet, matches as string) As Boolean		  dim lastFieldIx as integer = rs.FieldCount 		  rs.MoveFirst		  while not rs.EOF		    for i as integer = 1 to lastFieldIx  // snarl, fields are 1-indexed		      if StrComp( rs.IdxField(i).StringValue, matches, 0) = 0 then		        return true		      end if		    next i		    rs.MoveNext		  wend		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Fields(extends db as Database, tableName as string) As string()		  dim selectStr as string = "SELECT * FROM " + tableName + " LIMIT 1"		  dim rs as RecordSet = db.SQLSelect( selectStr )		  if rs is nil then		    dim ret() as string		    return ret		  end if		  return rs.Fields		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Fields(extends rs as RecordSet) As string()		  dim ret() as string		  dim lastFieldIx as integer = rs.FieldCount		  for i as integer = 1 to lastFieldIx  // snarl, fields are 1-indexed		    ret.Append rs.IdxField(i).Name		  next i		  return ret		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function HasField(extends db as Database, tableName as string, matchField as String) As Boolean		  dim selectStr as string = "SELECT * FROM " + tableName + " LIMIT 1"		  dim rs as RecordSet = db.SQLSelect( selectStr )		  if rs is nil then		    return False		  end if		  return rs.HasField(matchField)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function HasField(extends rs as RecordSet, matchName as string) As Boolean		  dim lastFieldIx as integer = rs.FieldCount		  for i as integer = 1 to lastFieldIx  // snarl, fields are 1-indexed		    if StrComp( rs.IdxField(i).Name,  matchName, 0 ) = 0 then		      return true		    end if		  next i		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function HasTable(extends db as Database, matchTable as String) As Boolean		  dim rs as RecordSet		  if db isa MySQLDatabase then		    rs = db.SQLSelect("SHOW TABLES")		  elseif db isa REALSQLDatabase then		    rs = db.SQLSelect("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")		  end if		  if rs is nil then		    return False		  end if		  return rs.ContainsCaseSensitive(matchTable)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Tables(extends db as Database) As string()		  dim rs as RecordSet		  if db isa MySQLDatabase then		    rs = db.SQLSelect("SHOW TABLES")		  elseif db isa REALSQLDatabase then		    rs = db.SQLSelect("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")		  end if		  if rs is nil then		    dim ret() as string		    return ret		  end if		  return rs.asStringArray		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule